"""
Manages the authenticated user's email addresses.
"""
import re

from aspen import Response
from gratipay.exceptions import ProblemChangingEmail
from gratipay.utils import get_participant

email_re = re.compile(r'^[^@]+@[^@]+\.[^@]+$')

[-----------------------------------------]

request.allow("POST")
participant = get_participant(state, restrict=True)

action = request.body['action']
address = request.body['address']

# This checks for exactly one @ and at least one . after @
# The real validation will happen when we send the email
too_long = len(address) > 254
if too_long or not email_re.match(address):
    raise Response(400, _("Invalid email address."))

if not participant.email_lang:
    participant.set_email_lang(request.headers.get("Accept-Language"))

msg = None
if action in ('add-email', 'resend'):
    try:
        participant.add_email(address, website.env.resend_verification_threshold)
    except EmailTaken:
        raise Response(400, _( "{email_address} is already linked to a different Gratipay account."
                             , email_address=address
                              ))
    except EmailAlreadyVerified:
        raise Response(400, _( "You have already added and verified {email_address}."
                             , email_address=address
                              ))
    else:
        msg = _("A verification email has been sent to {email_address}.", email_address=address)
elif action == 'set-primary':
    participant.update_email(address)
elif action == 'remove':
    participant.remove_email(address)
else:
    raise Response(400, 'unknown action "%s"' % action)

[---] application/json via json_dump
msg
